import{o as e,c as a,d as s}from"./app.03d90df1.js";const n='{"title":"运算符和表达式","description":"","frontmatter":{},"headers":[{"level":2,"title":"优先级","slug":"优先级"},{"level":2,"title":"运算符","slug":"运算符"},{"level":3,"title":"算数运算符","slug":"算数运算符"},{"level":3,"title":"自增、自减运算符","slug":"自增、自减运算符"},{"level":3,"title":"关系运算符","slug":"关系运算符"},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符"},{"level":3,"title":"位运算符","slug":"位运算符"},{"level":3,"title":"赋值运算符","slug":"赋值运算符"},{"level":3,"title":"逗号运算符","slug":"逗号运算符"},{"level":3,"title":"指针运算符","slug":"指针运算符"},{"level":3,"title":"成员运算符","slug":"成员运算符"},{"level":2,"title":"表达式","slug":"表达式"},{"level":3,"title":"三元表达式","slug":"三元表达式"},{"level":2,"title":"算数表达式","slug":"算数表达式"},{"level":3,"title":"不同类型的数值型数据间的混合运算","slug":"不同类型的数值型数据间的混合运算"},{"level":3,"title":"强制类型转换","slug":"强制类型转换"}],"relativePath":"programing/c/operators-and-expressions.md","lastUpdated":1613793501932}',l={},o=s('<h1 id="运算符和表达式"><a class="header-anchor" href="#运算符和表达式" aria-hidden="true">#</a> 运算符和表达式</h1><h2 id="优先级"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h2><p>运算符的优先级和数学上规定的相同，先乘除后加减，同级时按从左到右的顺序执行。</p><h2 id="运算符"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="算数运算符"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h3><ul><li><code>+</code>：加法/正值运算符，如<code>3+5, +3</code>。</li><li><code>-</code>：减法/负值运算符，如<code>5-2, -3</code>。</li><li><code>*</code>：乘法运算符，如<code>3*5</code>。</li><li><code>/</code>：除法运算符，如<code>3/5</code>。</li><li><code>%</code>：模/求余运算符，如<code>3%5</code>。用于求两个整数相除后的余数，<code>%</code>两侧均应为整数类型。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果参与算数运算的两个数有一个为<code>float</code>或<code>double</code>类型，则结果均为<code>double</code>类型。为了提高运算精度，系统会将所有<code>float</code>类型数据先转换为<code>double</code>类型，再进行计算。</p></div><h3 id="自增、自减运算符"><a class="header-anchor" href="#自增、自减运算符" aria-hidden="true">#</a> 自增、自减运算符</h3><ul><li><code>++</code>：自增运算符。</li><li><code>--</code>：自减运算符。</li></ul><p>自增、自减运算符的作用是使变量加 1 或减 1。值得注意的是，运算符的位置不同会对赋值产生影响。如<code>++i</code>和<code>i++</code>，假设<code>i</code>为 3 的时候，如下：</p><div class="language-c line-numbers-mode"><pre><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %d\\n&quot;</span><span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当<code>a + i++</code>时，<code>i</code>先赋值后再自增，执行过程相当于：</p><div class="language-c line-numbers-mode"><pre><code>a <span class="token operator">+</span> i<span class="token punctuation">;</span>\ni <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当<code>a + ++i</code>时，<code>i</code>先自增再进行赋值，执行过程相当于：</p><div class="language-c line-numbers-mode"><pre><code>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\na <span class="token operator">+</span> i<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同理，自减运算符也是如此。</p><h3 id="关系运算符"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><ul><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>==</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li><li><code>!=</code></li></ul><h3 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><ul><li><code>!</code></li><li><code>&amp;&amp;</code></li><li><code>||</code></li></ul><h3 id="位运算符"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><ul><li><code>&lt;&lt;</code></li><li><code>&gt;&gt;</code></li><li><code>~</code></li><li><code>|</code></li><li><code>^</code></li><li><code>&amp;</code></li></ul><h3 id="赋值运算符"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p><code>=</code></p><h3 id="逗号运算符"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h3><p><code>,</code></p><h3 id="指针运算符"><a class="header-anchor" href="#指针运算符" aria-hidden="true">#</a> 指针运算符</h3><ul><li><code>*</code></li><li><code>&amp;</code></li></ul><h3 id="成员运算符"><a class="header-anchor" href="#成员运算符" aria-hidden="true">#</a> 成员运算符</h3><ul><li><code>.</code></li><li><code>-&gt;</code></li><li><code>[]</code></li></ul><h2 id="表达式"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><h3 id="三元表达式"><a class="header-anchor" href="#三元表达式" aria-hidden="true">#</a> 三元表达式</h3><p><code>tureOrFalse ? value1 : value2</code></p><h2 id="算数表达式"><a class="header-anchor" href="#算数表达式" aria-hidden="true">#</a> 算数表达式</h2><p>用算数运算符和括号将运算对象连接起来的、符合 C 语法规则的式子被称为<strong>算数运算符</strong>。如：<code>i _ j / c - 1.5 * sin(x) + &#39;m&#39;</code>。</p><h3 id="不同类型的数值型数据间的混合运算"><a class="header-anchor" href="#不同类型的数值型数据间的混合运算" aria-hidden="true">#</a> 不同类型的数值型数据间的混合运算</h3><p>C 语言允许整型（int, short, long）和浮点数（float, double, long double）进行混合运算，由于字符串类型可以和整型通用，因此整型、浮点数和字符串数据间可以混合运算。进行运算时，不同类型的数据会先转换成同一类型，然后进行计算，转换的规则如下：</p><ol><li>char 和 short 转换为 int。</li><li>float 转换为 double。</li><li>int, short, long 数据与 double 数据进行运算时，先将整型转换成 double。</li></ol><blockquote><p>规律是将字节少的类型转换成字节多的类型。</p></blockquote><h3 id="强制类型转换"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><p>表达式中可以利用强制类型转换运算符将数据转换成所需要的类型。一般形式为：</p><div class="language-c line-numbers-mode"><pre><code><span class="token punctuation">(</span>type name<span class="token punctuation">)</span><span class="token punctuation">(</span>expressions<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>',42);l.render=function(s,n,l,c,i,d){return e(),a("div",null,[o])};export default l;export{n as __pageData};
