import{r as n,o as s,c as a,a as e,b as t,d as o}from"./app.03d90df1.js";const p='{"title":"数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"整型","slug":"整型"},{"level":3,"title":"表现形式","slug":"表现形式"},{"level":3,"title":"常量类型","slug":"常量类型"},{"level":2,"title":"浮点数","slug":"浮点数"},{"level":2,"title":"字符串","slug":"字符串"},{"level":2,"title":"符号常量","slug":"符号常量"}],"relativePath":"programing/c/data-type.md","lastUpdated":1613793501932}',c={},l=e("h1",{id:"数据类型"},[e("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),t(" 数据类型")],-1),i=o('<h2 id="整型"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型</h2><p>在 C 中整型变量用<code>int</code>来声明。如果需要可以更改变量的字节数，定义<strong>长整形</strong>或<strong>短整形</strong>，只需要在类型前面加上修饰词<code>long</code>或<code>short</code>即可。</p><p>有些情况下，变量的值通常为正的（如学号、年龄、库存量等）。为了充分使用变量的数值的范围，可以使整型变量的储存单元的首位不存储数值符号，而将全部的二进制位来存储数值本身。这样可以使得存储数值的范围扩大一倍，此时存储的值都是无符号的。可以在类型前面加修饰词<code>unsigned</code>来指定变量为无符号的整型变量。也可以加修饰词<code>signed</code>表示为有符号的（<code>int</code> 类型默认为有符号的）。</p><p>C 标准里没有具体规定以上各种数据所占内存的字节数，只要求<code>long int</code>类型数据长度不短与<code>int</code>类型，<code>short int</code>类型数据长度不长与<code>int</code>类型。目前通常的做法是：把<code>long</code>定在 32 位，<code>short</code>定在 16 位，<code>int</code>可以是 16 位，也可以是 32 位。</p><p>因此可以使用的整数类型有：</p><ul><li><code>int</code>： 基本整型</li><li><code>long int</code>： 长整型</li><li><code>short int</code>： 短整型</li><li><code>signed int</code>： 有符号整型</li><li><code>unsigned int</code>： 无符号整型</li><li><code>signed short int</code>：有符号短整型</li><li><code>unsigned short int</code>：无符号短整型</li><li><code>signed long int</code>：有符号长整型</li><li><code>unsigned long int</code>：无符号长整型</li><li><code>long long int</code>：双长整型</li><li><code>unsigned long long int</code>：无符号双长整型</li></ul><p>通过<code>sizeof</code>方法可以查询系统对变量分配对空间，如：</p><div class="language-c line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d long int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 long int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d short int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 short int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d signed int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 signed int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d unsigned int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 unsigned int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d signed short int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 signed short int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d unsigned short int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 unsigned short int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d signed long int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 signed long int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d unsigned long int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 unsigned long int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d long long int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 long long int</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d unsigned long long int\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 unsigned long long int</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="表现形式"><a class="header-anchor" href="#表现形式" aria-hidden="true">#</a> 表现形式</h3><p>C 语言中，整型可以用以下三种形式表示：</p><ul><li>十进制：如 123，-234。</li><li>八进制：以 0 开头的数都被认为八进制数。如 0123 表示八进制数 123，即(123)<sub>8</sub>，等于十进制数 83。</li><li>十六进制：以 0x 开头的数都被认作十六进制数。如 0x123 代表十六进制数 123，即(123)<sub>16</sub>，等于而进制数 291。</li></ul><h3 id="常量类型"><a class="header-anchor" href="#常量类型" aria-hidden="true">#</a> 常量类型</h3><p>整型常量在字面上可以决定它是什么类型的，如果<code>short</code>型数据在内存中占 2 字节，<code>int</code>和<code>long int</code>型数据占 4 字节，按照以下规则处理：</p><ol><li>在-32768~32767 范围内，为<code>short</code>型，分配 2 字节。可以赋值给<code>short</code>, <code>int</code>和<code>long int</code>。</li><li>超出上述范围，而在-2147483648~2147483647 范围内，则为整型，分配 4 字节。可赋值给<code>int</code>或<code>long int</code>型变量</li><li>在整型常量后面加一个字母<code>l</code>或<code>L</code>则认为是<code>long int</code>型常量，如 123l、432L 等。</li><li>在整数常量后面加一个字母<code>u</code>或<code>U</code>则认为是<code>unsigned int</code>型常量，如 12345u。</li></ol><h2 id="浮点数"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h2><p>浮点数在 C 中有两种表现形式：</p>',16),u=e("ol",null,[e("li",null,"十进制小数：由数字和小数点组成。"),e("li",null,[t("指数形式：在数学上，类似于 123 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mo",null,"×")]),e("annotation",{encoding:"application/x-tex"},"\\times")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{class:"mord"},"×")])])]),t(" 10"),e("sup",null,"3"),t("这样的形式成为指数形式。在计算机的字符中无法表示上标和下标，所以用字母"),e("strong",null,"e"),t("或"),e("strong",null,"E"),t("来表示以 10 为底的指数。例如用 123e3 或 123E3 来表示 123 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mo",null,"×")]),e("annotation",{encoding:"application/x-tex"},"\\times")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{class:"mord"},"×")])])]),t(" 10"),e("sup",null,"3"),t("，但是字母 e 或 E 之前必须有数字，且 e 后面的指数必须为整数，如 "),e("code",null,"e3, .e3, 2e"),t(" 都是不合法的指数形式。")])],-1),d=o('<p>浮点数变量分为 3 类：</p><ul><li><code>float</code>： 单精度浮点数</li><li><code>double</code>： 双精度浮点数</li><li><code>long double</code>： 长双精度浮点数</li></ul><h2 id="字符串"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>在 C 中字符串类型用<code>char</code>来声明，C 里面字符串分为字符常量和字符变量。</p><ul><li>转义字符：用来作为输出信息时的控制符号（如换行、退格等），转义字符通常用<code>\\</code>开头，<code>\\</code>后面的字符转换成另外的意义。如<code>\\n</code>代表换行符。</li><li>字符常量：字符常量通常使用单撇号括起来的<strong>一个</strong>字符，如<code>&#39;a&#39;</code>。</li><li>字符变量：字符变量用来存放字符常量，它只能存放一个字符（不能储存<strong>字符串</strong> - 若干个字符）。 <blockquote><p>在所有的编译系统中都规定以一字节来存放一个字符，字符数据是以 ASCII 码储存的。</p></blockquote></li><li>字符串变量：字符串常量是一对双撇号括起来的字符序列，如<code>&quot;Hello World&quot;</code>。如果将字符串存放在内存中，必须使用<strong>字符数组</strong>。 <blockquote><p><code>&#39;a&#39;</code>和<code>&quot;a&quot;</code>的区别在于，C 语言编译系统在处理字符串时，会在每个字符串变量的结尾加入一个字符<code>\\0</code>来表示字符串的结束，<code>\\0</code>是一个 ASCII 码为 0 的字符。</p></blockquote></li></ul><h2 id="符号常量"><a class="header-anchor" href="#符号常量" aria-hidden="true">#</a> 符号常量</h2><p>用<strong>符号</strong>来代表一个常量这种成为符号常量。符号常量只是一个<strong>符号</strong>，不占用储存单元，它只是简单的将字符置换。符号常量的声明方式如下：</p><div class="language-c line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415926</span></span></span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><code>#define</code>只是一个“预编译指令”。符号常量只是符号，不是变量，不能对其赋值，也不能对其指定类型。</p>',9);c.render=function(t,o,p,c,r,k){const g=n("Mermaid");return s(),a("div",null,[l,e(g,{id:"mermaid_3",graph:"graph LR\ndata-type[数据类型] --\x3e base-type[基本类型]\ndata-type --\x3e enum-type[枚举类型 - enum]\ndata-type --\x3e void-type[空类型 - void]\ndata-type --\x3e derived-type[派生类型]\n\nbase-type --\x3e int-type[整型类型]\nbase-type --\x3e float-type[浮点类型]\n\nderived-type --\x3e pointer-type[指针类型 - *]\nderived-type --\x3e array-type[数组类型 - ]\nderived-type --\x3e structure-type[结构体类型 - struct]\nderived-type --\x3e union-type[共用体类型 - union]\n\nint-type --\x3e int[整型 - int]\nint-type --\x3e string[字符串类型 - char]\nint-type --\x3e boolean[布尔类型 - bool]\n\nfloat-type --\x3e float[单精度浮点数类型 - float]\nfloat-type --\x3e double[双精度浮点数类型 - double]\n"}),i,u,d])};export default c;export{p as __pageData};
